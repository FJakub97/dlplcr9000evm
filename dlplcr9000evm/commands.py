from enum import Enum

COMMAND_SIZE = 2
COMMAND_ORDER = "little"


class Command(Enum):
    HARDWARE_STATUS = (0x1A0A, 0x00)
    SYSTEM_STATUS = (0x1A0B, 0x00)
    MAIN_STATUS = (0x1A0C, 0x00)
    FIRMWARE_VERSION = (0x0205, 0x00)
    HARDWARE_CONFIGURATION_AND_FIRMWARE_TAG_INFORMATION = (0x0206, 0x21)
    ERROR_CODE = (0x0100, 0x01)
    ERROR_DESCRIPTION = (0x0101, 0x80)
    POWER_MODE = (0x0200, 0x01)
    DMD_PARK_OR_UNPARK = (0x0609, 0x01)
    CURTAIN_COLOR = (0x1100, 0x06)
    PARALLEL_PORT_CONFIGURATION = (0x1A3C, 0x12)
    INPUT_DATA_CHANNEL_SWAP = (0x1A37, 0x01)
    PORT_AND_CLOCK_CONFIGURATION = (0x1A03, 0x01)
    INPUT_SOURCE_CONFIGURATION = (0x1A00, 0x01)
    INPUT_PIXEL_DATA_FORMAT = (0x1A02, 0x01)
    INTERNAL_TEST_PATTERN_SELECT = (0x1203, 0x01)
    INTERNAL_TEST_PATTERN_COLOR = (0x1204, 0x0C)
    LOAD_IMAGE = (0x1A39, 0x01)
    SHORT_AXIS_IMAGE_FLIP = (0x1009, 0x01)
    IT6535_POWER_MODE = (0x1A01, 0x01)
    GAMMA_CONFIGURATION_AND_ENABLE = (0x1A3B, 0x02)
    LED_ENABLE_OUTPUTS = (0x1A07, 0x01)
    LED_PWM_POLARITY = (0x1A05, 0x01)
    LED_DRIVER_CURRENT = (0x0B01, 0x03)
    MINIMUM_LED_PULSE_WIDTH_IN_MICROSECONDS = (0x1A43, 0x04)
    MINIMUM_LED_PATTERN_EXPOSURE_IN_MICROSECONDS = (0x1A42, 0x02)
    GPIO_CONFIGURATION = (0x1A38, 0x02)
    GPIO_CLOCK_CONFIGURATION = (0x0807, 0x03)
    GPIO_BUSY = (0x1A5E, 0x01)
    PWM_SETUP = (0x1A11, 0x06)
    PWM_ENABLE = (0x1A10, 0x01)
    DISPLAY_MODE_SELECTION = (0x1A1B, 0x01)
    DMD_BLOCK_LOAD = (0x1A40, 0x02)
    DMD_IDLE_MODE = (0x0201, 0x01)
    TRIGGER_OUTPUT_1 = (0x1A1D, 0x05)
    TRIGGER_OUTPUT_2 = (0x1A1E, 0x05)
    TRIGGER_IN_1 = (0x1A35, 0x03)
    TRIGGER_IN_2 = (0x1A36, 0x01)
    RED_LED_ENABLE_DELAY = (0x1A1F, 0x05)
    GREEN_LED_ENABLE_DELAY = (0x1A20, 0x05)
    BLUE_LED_ENABLE_DELAY = (0x1A21, 0x05)
    PATTERN_START_OR_STOP = (0x1A24, 0x01)
    PATTERN_DISPLAY_INVERT_DATA = (0x1A30, 0x01)
    PATTERN_DISPLAY_LUT_CONFIGURATION = (0x1A31, 0x06)
    PATTERN_DISPLAY_LUT_DEFINITION = (0x1A34, 0x0C)
    PATTERN_DISPLAY_REORDER_CONFIGURATION = (0x1A32, 0x02)
    INITIALIZE_PATTERN_BMP_LOAD_PRIMARY = (0x1A2A, 0x06)
    INITIALIZE_PATTERN_BMP_LOAD_SECONDARY = (0x1A2C, 0x06)
    PATTERN_BMP_LOAD_PRIMARY = (0x1A2B, 0x00)
    PATTERN_BMP_LOAD_SECONDARY = (0x1A2D, 0x00)

    def __init__(self, usb: int, payload_length: int) -> None:
        self.usb = usb
        self.payload_length = payload_length


if __name__ == "__main__":
    pass
